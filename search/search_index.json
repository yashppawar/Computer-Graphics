{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Computer Graphics using C language \ud83d\uddbc\ufe0f This repository contains the source code for the Computer Graphics using C language course. Computer Graphics \ud83c\udfa8 Computer graphics is the study of digital visual contents, and involves synthesis and manipulation of image data. It is a subfield of computer science and it is related to computer vision, computational geometry, and computational photography. C language \ud83d\udcdc C is a general-purpose, imperative computer programming language, supporting structured programming, lexical variable scope, and recursion, while a static type system prevents many unintended operations. By design, C provides constructs that map efficiently to typical machine instructions, and therefore it has found lasting use in applications that had formerly been coded in assembly language, including operating systems, as well as various application software for computers ranging from supercomputers to embedded systems.","title":"Home"},{"location":"#computer-graphics-using-c-language","text":"This repository contains the source code for the Computer Graphics using C language course.","title":"Computer Graphics using C language \ud83d\uddbc\ufe0f"},{"location":"#computer-graphics","text":"Computer graphics is the study of digital visual contents, and involves synthesis and manipulation of image data. It is a subfield of computer science and it is related to computer vision, computational geometry, and computational photography.","title":"Computer Graphics \ud83c\udfa8"},{"location":"#c-language","text":"C is a general-purpose, imperative computer programming language, supporting structured programming, lexical variable scope, and recursion, while a static type system prevents many unintended operations. By design, C provides constructs that map efficiently to typical machine instructions, and therefore it has found lasting use in applications that had formerly been coded in assembly language, including operating systems, as well as various application software for computers ranging from supercomputers to embedded systems.","title":"C language \ud83d\udcdc"},{"location":"Programs/boundry/","text":"","title":"Boundary Fill Algorithm"},{"location":"Programs/bresnham/","text":"Bresnham Line Drawing Algorithm The Bresnham line drawing algorithm is an algorithm that is used to draw a line between two points on a computer screen. The algorithm is based on the DDA algorithm, but it is more efficient than the DDA algorithm. The Bresnham algorithm is implemented in the bresnham function in the line module. Algorithm The Bresnham algorithm is based on the following formula: x = x_0 + t \\cdot \\Delta x y = y_0 + t \\cdot \\Delta y where t is a parameter that varies from 0 to 1. The values of x and y are calculated for each value of t . The values of x and y are rounded to the nearest integer, and the pixel at that location is set to the desired color. Implementation The Bresnham algorithm is implemented in the bresnham function in the line module. The function takes the following parameters: x0 and y0 : The coordinates of the first point. x1 and y1 : The coordinates of the second point. color : The color of the line. The function calculates the values of dx and dy , and then it calculates the value of t that will be used to calculate the values of x and y . The function then iterates from t = 0 to t = 1 , calculating the values of x and y for each value of t . The values of x and y are rounded to the nearest integer, and the pixel at that location is set to the desired color. Example The following example draws a line from (0, 0) to (100, 100) using the Bresnham algorithm: // Bresnham Line Drawing Algorithm #include <stdio.h> #include <string.h> #include <graphics.h> #include <math.h> int main (){ int gd = DETECT , gm , x , y , x1 , x2 , y1 , y2 , dx , dy , step , xinc , yinc , i ; initgraph ( & gd , & gm , \"C: \\\\ Program Files (x86) \\\\ Colorado \\\\ cs1300 \\\\ bgi\" ); printf ( \"Enter the staring Co-ordinates : \" ); scanf ( \"%d %d\" , & x1 , & y1 ); printf ( \"Enter the end Co-ordinates : \" ); scanf ( \"%d %d\" , & x2 , & y2 ); dx = ( x2 - x1 ); dy = ( y2 - y1 ); if ( abs ( dx ) >= abs ( dy )) step = abs ( dx ); else step = abs ( dy ); xinc = dx / step ; yinc = dy / step ; x = x1 ; y = y1 ; putpixel ( x , y , WHITE ); for ( i = 0 ; i < step ; i ++ ){ x = x + xinc ; y = y + yinc ; putpixel ( x , y , WHITE ); } getch (); closegraph (); return 0 ; }","title":"Bresenham Line Drawing Algorithm"},{"location":"Programs/bresnham/#bresnham-line-drawing-algorithm","text":"The Bresnham line drawing algorithm is an algorithm that is used to draw a line between two points on a computer screen. The algorithm is based on the DDA algorithm, but it is more efficient than the DDA algorithm. The Bresnham algorithm is implemented in the bresnham function in the line module.","title":"Bresnham Line Drawing Algorithm"},{"location":"Programs/bresnham/#algorithm","text":"The Bresnham algorithm is based on the following formula: x = x_0 + t \\cdot \\Delta x y = y_0 + t \\cdot \\Delta y where t is a parameter that varies from 0 to 1. The values of x and y are calculated for each value of t . The values of x and y are rounded to the nearest integer, and the pixel at that location is set to the desired color.","title":"Algorithm"},{"location":"Programs/bresnham/#implementation","text":"The Bresnham algorithm is implemented in the bresnham function in the line module. The function takes the following parameters: x0 and y0 : The coordinates of the first point. x1 and y1 : The coordinates of the second point. color : The color of the line. The function calculates the values of dx and dy , and then it calculates the value of t that will be used to calculate the values of x and y . The function then iterates from t = 0 to t = 1 , calculating the values of x and y for each value of t . The values of x and y are rounded to the nearest integer, and the pixel at that location is set to the desired color.","title":"Implementation"},{"location":"Programs/bresnham/#example","text":"The following example draws a line from (0, 0) to (100, 100) using the Bresnham algorithm: // Bresnham Line Drawing Algorithm #include <stdio.h> #include <string.h> #include <graphics.h> #include <math.h> int main (){ int gd = DETECT , gm , x , y , x1 , x2 , y1 , y2 , dx , dy , step , xinc , yinc , i ; initgraph ( & gd , & gm , \"C: \\\\ Program Files (x86) \\\\ Colorado \\\\ cs1300 \\\\ bgi\" ); printf ( \"Enter the staring Co-ordinates : \" ); scanf ( \"%d %d\" , & x1 , & y1 ); printf ( \"Enter the end Co-ordinates : \" ); scanf ( \"%d %d\" , & x2 , & y2 ); dx = ( x2 - x1 ); dy = ( y2 - y1 ); if ( abs ( dx ) >= abs ( dy )) step = abs ( dx ); else step = abs ( dy ); xinc = dx / step ; yinc = dy / step ; x = x1 ; y = y1 ; putpixel ( x , y , WHITE ); for ( i = 0 ; i < step ; i ++ ){ x = x + xinc ; y = y + yinc ; putpixel ( x , y , WHITE ); } getch (); closegraph (); return 0 ; }","title":"Example"},{"location":"Programs/circle/","text":"","title":"Circle Drawing Algorithm"},{"location":"Programs/dda/","text":"DDA algorithm The DDA algorithm is a simple algorithm for drawing lines. It is very fast, but it has some problems. It is not suitable for drawing thick lines, and it is not suitable for drawing lines with a slope of 1 or -1. It is also not suitable for drawing lines with a slope of 0 or infinity. Algorithm The DDA algorithm is very simple. It is based on the following formula: x = x_0 + t \\cdot \\Delta x y = y_0 + t \\cdot \\Delta y where t is a parameter that varies from 0 to 1. The values of x and y are calculated for each value of t . The values of x and y are rounded to the nearest integer, and the pixel at that location is set to the desired color. Implementation The DDA algorithm is implemented in the dda function in the line module. The function takes the following parameters: x0 and y0 : The coordinates of the first point. x1 and y1 : The coordinates of the second point. color : The color of the line. The function calculates the values of dx and dy , and then it calculates the value of t that will be used to calculate the values of x and y . The function then iterates from t = 0 to t = 1 , calculating the values of x and y for each value of t . The values of x and y are rounded to the nearest integer, and the pixel at that location is set to the desired color. Example The following example draws a line from (0, 0) to (100, 100) using the DDA algorithm: // DDA (Digital Differential Algorithm) algorithm #include <stdio.h> #include <string.h> #include <graphics.h> #include <math.h> int main (){ int gd = DETECT , gm , x , y , x1 , x2 , y1 , y2 , dx , dy , step , xinc , yinc , i ; initgraph ( & gd , & gm , \"C: \\\\ Program Files (x86) \\\\ Colorado \\\\ cs1300 \\\\ bgi\" ); printf ( \"Enter the staring Co-ordinates : \" ); scanf ( \"%d %d\" , & x1 , & y1 ); printf ( \"Enter the end Co-ordinates : \" ); scanf ( \"%d %d\" , & x2 , & y2 ); dx = ( x2 - x1 ); dy = ( y2 - y1 ); if ( abs ( dx ) >= abs ( dy )) step = abs ( dx ); else step = abs ( dy ); xinc = dx / step ; yinc = dy / step ; x = x1 ; y = y1 ; putpixel ( x , y , 4 ); for ( i = 0 ; i < step ; i ++ ) { x = x + xinc ; y = y + yinc ; putpixel ( x , y , 4 ); } getch (); closegraph (); return 0 ; }","title":"DDA Line Drawing Algorithm"},{"location":"Programs/dda/#dda-algorithm","text":"The DDA algorithm is a simple algorithm for drawing lines. It is very fast, but it has some problems. It is not suitable for drawing thick lines, and it is not suitable for drawing lines with a slope of 1 or -1. It is also not suitable for drawing lines with a slope of 0 or infinity.","title":"DDA algorithm"},{"location":"Programs/dda/#algorithm","text":"The DDA algorithm is very simple. It is based on the following formula: x = x_0 + t \\cdot \\Delta x y = y_0 + t \\cdot \\Delta y where t is a parameter that varies from 0 to 1. The values of x and y are calculated for each value of t . The values of x and y are rounded to the nearest integer, and the pixel at that location is set to the desired color.","title":"Algorithm"},{"location":"Programs/dda/#implementation","text":"The DDA algorithm is implemented in the dda function in the line module. The function takes the following parameters: x0 and y0 : The coordinates of the first point. x1 and y1 : The coordinates of the second point. color : The color of the line. The function calculates the values of dx and dy , and then it calculates the value of t that will be used to calculate the values of x and y . The function then iterates from t = 0 to t = 1 , calculating the values of x and y for each value of t . The values of x and y are rounded to the nearest integer, and the pixel at that location is set to the desired color.","title":"Implementation"},{"location":"Programs/dda/#example","text":"The following example draws a line from (0, 0) to (100, 100) using the DDA algorithm: // DDA (Digital Differential Algorithm) algorithm #include <stdio.h> #include <string.h> #include <graphics.h> #include <math.h> int main (){ int gd = DETECT , gm , x , y , x1 , x2 , y1 , y2 , dx , dy , step , xinc , yinc , i ; initgraph ( & gd , & gm , \"C: \\\\ Program Files (x86) \\\\ Colorado \\\\ cs1300 \\\\ bgi\" ); printf ( \"Enter the staring Co-ordinates : \" ); scanf ( \"%d %d\" , & x1 , & y1 ); printf ( \"Enter the end Co-ordinates : \" ); scanf ( \"%d %d\" , & x2 , & y2 ); dx = ( x2 - x1 ); dy = ( y2 - y1 ); if ( abs ( dx ) >= abs ( dy )) step = abs ( dx ); else step = abs ( dy ); xinc = dx / step ; yinc = dy / step ; x = x1 ; y = y1 ; putpixel ( x , y , 4 ); for ( i = 0 ; i < step ; i ++ ) { x = x + xinc ; y = y + yinc ; putpixel ( x , y , 4 ); } getch (); closegraph (); return 0 ; }","title":"Example"},{"location":"Programs/midpoint/","text":"","title":"Midpoint Circle Drawing Algorithm"}]}